// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

use crate::consumer::fraud::RuleAction;
use serde::{Deserialize, Serialize};

/// SetRequest: Request type for `Rules.set`.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SetRequest {
    /// action: The action that should be returned by a fingerprint lookup for that fingerprint or ID with a
    /// `RULE_MATCH` reason. The following values are valid: `ALLOW`, `BLOCK`, `CHALLENGE`, or `NONE`. If a
    /// `NONE` action is specified, it will clear the stored rule.
    pub action: RuleAction,
    /// visitor_id: The visitor ID we want to set a rule for. Only one fingerprint or ID can be specified in the
    /// request.
    pub visitor_id: std::option::Option<String>,
    /// browser_id: The browser ID we want to set a rule for. Only one fingerprint or ID can be specified in the
    /// request.
    pub browser_id: std::option::Option<String>,
    /// visitor_fingerprint: The visitor fingerprint we want to set a rule for. Only one fingerprint or ID can
    /// be specified in the request.
    pub visitor_fingerprint: std::option::Option<String>,
    /// browser_fingerprint: The browser fingerprint we want to set a rule for. Only one fingerprint or ID can
    /// be specified in the request.
    pub browser_fingerprint: std::option::Option<String>,
    /// hardware_fingerprint: The hardware fingerprint we want to set a rule for. Only one fingerprint or ID can
    /// be specified in the request.
    pub hardware_fingerprint: std::option::Option<String>,
    /// network_fingerprint: The network fingerprint we want to set a rule for. Only one fingerprint or ID can
    /// be specified in the request.
    pub network_fingerprint: std::option::Option<String>,
    /// expires_in_minutes: The number of minutes until this rule expires. If no `expires_in_minutes` is
    /// specified, then the rule is kept permanently.
    pub expires_in_minutes: std::option::Option<i32>,
    /// description: An optional description for the rule.
    pub description: std::option::Option<String>,
}
/// SetResponse: Response type for `Rules.set`.
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SetResponse {
    /// request_id: Globally unique UUID that is returned with every API call. This value is important to log
    /// for debugging purposes; we may ask for this value to help identify a specific API call when helping you
    /// debug an issue.
    pub request_id: String,
    /// action: The action that will be returned for the specified fingerprint or ID.
    pub action: RuleAction,
    /// status_code: The HTTP status code of the response. Stytch follows standard HTTP response status code
    /// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
    /// are server errors.
    #[serde(with = "http_serde::status_code")]
    pub status_code: http::StatusCode,
    /// visitor_id: The cookie stored on the user's device that uniquely identifies them.
    pub visitor_id: std::option::Option<String>,
    /// browser_id: Combination of VisitorID and NetworkFingerprint to create a clear identifier of a browser.
    pub browser_id: std::option::Option<String>,
    /// visitor_fingerprint: Cookie-less way of identifying a unique user.
    pub visitor_fingerprint: std::option::Option<String>,
    /// browser_fingerprint: Combination of signals to identify a browser and its specific version.
    pub browser_fingerprint: std::option::Option<String>,
    /// hardware_fingerprint: Combinations of signals to identify an operating system and architecture.
    pub hardware_fingerprint: std::option::Option<String>,
    /// network_fingerprint: Combination of signals associated with a specific network commonly known as TLS
    /// fingerprinting.
    pub network_fingerprint: std::option::Option<String>,
    /// expires_at: The timestamp when the rule expires. Values conform to the RFC 3339 standard and are
    /// expressed in UTC, e.g. `2021-12-29T12:33:09Z`.
    pub expires_at: std::option::Option<chrono::DateTime<chrono::Utc>>,
}

pub struct Rules {
    http_client: crate::client::Client,
}

impl Rules {
    pub fn new(http_client: crate::client::Client) -> Self {
        Self {
            http_client: http_client.clone(),
        }
    }

    pub async fn set(&self, body: SetRequest) -> crate::Result<SetResponse> {
        let path = String::from("/v1/rules/set");
        self.http_client
            .send(crate::Request {
                method: http::Method::POST,
                path,
                body,
            })
            .await
    }
}
