// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

use crate::consumer::connected_apps::ConnectedApp;
use crate::consumer::connected_apps::ConnectedAppWithNextClientSecret;
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct RotateCancelRequest {
    pub client_id: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RotateCancelResponse {
    pub request_id: String,
    pub connected_app: ConnectedApp,
    #[serde(with = "http_serde::status_code")]
    pub status_code: http::StatusCode,
}
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct RotateRequest {
    pub client_id: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RotateResponse {
    pub request_id: String,
    pub connected_app: ConnectedApp,
    #[serde(with = "http_serde::status_code")]
    pub status_code: http::StatusCode,
}
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct RotateStartRequest {
    pub client_id: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RotateStartResponse {
    pub request_id: String,
    pub connected_app: ConnectedAppWithNextClientSecret,
    #[serde(with = "http_serde::status_code")]
    pub status_code: http::StatusCode,
}

pub struct Secrets {
    http_client: crate::client::Client,
}

impl Secrets {
    pub fn new(http_client: crate::client::Client) -> Self {
        Self {
            http_client: http_client.clone(),
        }
    }

    pub async fn rotate_start(
        &self,
        body: RotateStartRequest,
    ) -> crate::Result<RotateStartResponse> {
        let client_id = &body.client_id;
        let path = format!("/v1/connected_apps/clients/{client_id}/secrets/rotate/start");
        self.http_client
            .send(crate::Request {
                method: http::Method::POST,
                path,
                body,
            })
            .await
    }
    pub async fn rotate_cancel(
        &self,
        body: RotateCancelRequest,
    ) -> crate::Result<RotateCancelResponse> {
        let client_id = &body.client_id;
        let path = format!("/v1/connected_apps/clients/{client_id}/secrets/rotate/cancel");
        self.http_client
            .send(crate::Request {
                method: http::Method::POST,
                path,
                body,
            })
            .await
    }
    pub async fn rotate(&self, body: RotateRequest) -> crate::Result<RotateResponse> {
        let client_id = &body.client_id;
        let path = format!("/v1/connected_apps/clients/{client_id}/secrets/rotate");
        self.http_client
            .send(crate::Request {
                method: http::Method::POST,
                path,
                body,
            })
            .await
    }
}
