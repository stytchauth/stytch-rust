// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

use crate::consumer::sessions::Session;
use crate::consumer::users::User;
use serde::{Deserialize, Serialize};

/// ProviderValues:
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProviderValues {
    /// access_token: The `access_token` that you may use to access the User's data in the provider's API.
    pub access_token: String,
    /// refresh_token: The `refresh_token` that you may use to refresh a User's session within the provider's
    /// API.
    pub refresh_token: String,
    /// id_token: The `id_token` returned by the OAuth provider. ID Tokens are JWTs that contain structured
    /// information about a user. The exact content of each ID Token varies from provider to provider. ID Tokens
    /// are returned from OAuth providers that conform to the [OpenID Connect](https://openid.net/foundation/)
    /// specification, which is based on OAuth.
    pub id_token: String,
    /// scopes: The OAuth scopes included for a given provider. See each provider's section above to see which
    /// scopes are included by default and how to add custom scopes.
    pub scopes: std::vec::Vec<String>,
    /// expires_at: The timestamp when the Session expires. Values conform to the RFC 3339 standard and are
    /// expressed in UTC, e.g. `2021-12-29T12:33:09Z`.
    pub expires_at: std::option::Option<chrono::DateTime<chrono::Utc>>,
}

/// AttachRequest: Request type for `OAuth.attach`.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct AttachRequest {
    /// provider: The OAuth provider's name.
    pub provider: String,
    /// user_id: The unique ID of a specific User.
    pub user_id: std::option::Option<String>,
    /// session_token: The `session_token` associated with a User's existing Session.
    pub session_token: std::option::Option<String>,
    /// session_jwt: The `session_jwt` associated with a User's existing Session.
    pub session_jwt: std::option::Option<String>,
}

/// AttachResponse: Response type for `OAuth.attach`.
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AttachResponse {
    /// request_id: Globally unique UUID that is returned with every API call. This value is important to log
    /// for debugging purposes; we may ask for this value to help identify a specific API call when helping you
    /// debug an issue.
    pub request_id: String,
    /// oauth_attach_token: A single-use token for connecting the Stytch User selection from an OAuth Attach
    /// request to the corresponding OAuth Start request.
    pub oauth_attach_token: String,
    /// status_code: The HTTP status code of the response. Stytch follows standard HTTP response status code
    /// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
    /// are server errors.
    #[serde(with = "http_serde::status_code")]
    pub status_code: http::StatusCode,
}

/// AuthenticateRequest: Request type for `OAuth.authenticate`.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct AuthenticateRequest {
    /// token: The OAuth `token` from the `?token=` query parameter in the URL.
    ///
    ///   The redirect URL will look like
    /// `https://example.com/authenticate?stytch_token_type=oauth&token=rM_kw42CWBhsHLF62V75jELMbvJ87njMe3tFVj7Qupu7`
    ///
    ///   In the redirect URL, the `stytch_token_type` will be `oauth`. See
    /// [here](https://stytch.com/docs/guides/dashboard/redirect-urls) for more detail.
    pub token: String,
    /// session_token: Reuse an existing session instead of creating a new one. If you provide us with a
    /// `session_token`, then we'll update the session represented by this session token with this OAuth factor.
    /// If this `session_token` belongs to a different user than the OAuth token, the session_jwt will be
    /// ignored. This endpoint will error if both `session_token` and `session_jwt` are provided.
    pub session_token: std::option::Option<String>,
    /// session_duration_minutes: Set the session lifetime to be this many minutes from now. This will start a
    /// new session if one doesn't already exist,
    ///   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
    /// `session_jwt` will have a fixed lifetime of
    ///   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
    ///
    ///   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
    ///
    ///   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
    /// extend the session this many minutes.
    ///
    ///   If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
    pub session_duration_minutes: std::option::Option<i32>,
    /// session_jwt: Reuse an existing session instead of creating a new one. If you provide us with a
    /// `session_jwt`, then we'll update the session represented by this JWT with this OAuth factor. If this
    /// `session_jwt` belongs to a different user than the OAuth token, the session_jwt will be ignored. This
    /// endpoint will error if both `session_token` and `session_jwt` are provided.
    pub session_jwt: std::option::Option<String>,
    /// session_custom_claims: Add a custom claims map to the Session being authenticated. Claims are only
    /// created if a Session is initialized by providing a value in `session_duration_minutes`. Claims will be
    /// included on the Session object and in the JWT. To update a key in an existing Session, supply a new
    /// value. To delete a key, supply a null value.
    ///
    ///   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be
    /// ignored. Total custom claims size cannot exceed four kilobytes.
    pub session_custom_claims: std::option::Option<serde_json::Value>,
    /// code_verifier: A base64url encoded one time secret used to validate that the request starts and ends on
    /// the same device.
    pub code_verifier: std::option::Option<String>,
}

/// AuthenticateResponse: Response type for `OAuth.authenticate`.
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AuthenticateResponse {
    /// request_id: Globally unique UUID that is returned with every API call. This value is important to log
    /// for debugging purposes; we may ask for this value to help identify a specific API call when helping you
    /// debug an issue.
    pub request_id: String,
    /// user_id: The unique ID of the affected User.
    pub user_id: String,
    /// provider_subject: The unique identifier for the User within a given OAuth provider. Also commonly called
    /// the "sub" or "Subject field" in OAuth protocols.
    pub provider_subject: String,
    /// provider_type: Denotes the OAuth identity provider that the user has authenticated with, e.g. Google,
    /// Facebook, GitHub etc.
    pub provider_type: String,
    /// session_token: A secret token for a given Stytch Session.
    pub session_token: String,
    /// session_jwt: The JSON Web Token (JWT) for a given Stytch Session.
    pub session_jwt: String,
    /// provider_values: The `provider_values` object lists relevant identifiers, values, and scopes for a given
    /// OAuth provider. For example this object will include a provider's `access_token` that you can use to
    /// access the provider's API for a given user.
    ///
    ///   Note that these values will vary based on the OAuth provider in question, e.g. `id_token` is only
    /// returned by OIDC complaint identity providers.
    pub provider_values: ProviderValues,
    /// user: The `user` object affected by this API call. See the
    /// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
    pub user: User,
    /// reset_sessions: Indicates if all other of the User's Sessions need to be reset. You should check this
    /// field if you aren't using Stytch's Session product. If you are using Stytch's Session product, we revoke
    /// the User's other sessions for you.
    pub reset_sessions: bool,
    /// oauth_user_registration_id: The unique ID for an OAuth registration.
    pub oauth_user_registration_id: String,
    /// status_code: The HTTP status code of the response. Stytch follows standard HTTP response status code
    /// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
    /// are server errors.
    #[serde(with = "http_serde::status_code")]
    pub status_code: http::StatusCode,
    /// user_session: A `Session` object. For backwards compatibility reasons, the session from an OAuth
    /// authenticate call is labeled as `user_session`, but is otherwise just a standard stytch `Session` object.
    ///
    ///   See [GET sessions](https://stytch.com/docs/api/session-get) for complete response fields.
    ///
    pub user_session: std::option::Option<Session>,
}

pub struct OAuth {
    http_client: crate::client::Client,
}

impl OAuth {
    pub fn new(http_client: crate::client::Client) -> Self {
        Self {
            http_client: http_client.clone(),
        }
    }

    pub async fn attach(&self, body: AttachRequest) -> crate::Result<AttachResponse> {
        let path = String::from("/v1/oauth/attach");
        self.http_client
            .send(crate::Request {
                method: http::Method::POST,
                path,
                body,
            })
            .await
    }
    pub async fn authenticate(
        &self,
        body: AuthenticateRequest,
    ) -> crate::Result<AuthenticateResponse> {
        let path = String::from("/v1/oauth/authenticate");
        self.http_client
            .send(crate::Request {
                method: http::Method::POST,
                path,
                body,
            })
            .await
    }
}
