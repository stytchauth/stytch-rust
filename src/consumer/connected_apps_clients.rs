// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

use crate::consumer::connected_apps::ConnectedApp;
use crate::consumer::connected_apps::ConnectedAppWithClientSecret;
use crate::consumer::connected_apps::ResultsMetadata;
use crate::consumer::connected_apps_clients_secrets::Secrets;
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CreateRequest {
    pub client_type: CreateRequestClientType,
    pub redirect_urls: std::vec::Vec<String>,
    pub full_access_allowed: bool,
    pub post_logout_redirect_urls: std::vec::Vec<String>,
    pub client_name: std::option::Option<String>,
    pub client_description: std::option::Option<String>,
    pub access_token_expiry_minutes: std::option::Option<i32>,
    pub access_token_custom_audience: std::option::Option<String>,
    pub access_token_template_content: std::option::Option<String>,
    pub logo_url: std::option::Option<String>,
    pub bypass_consent_for_offline_access: std::option::Option<bool>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CreateResponse {
    pub request_id: String,
    pub connected_app: ConnectedAppWithClientSecret,
    #[serde(with = "http_serde::status_code")]
    pub status_code: http::StatusCode,
}
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct DeleteRequest {
    pub client_id: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeleteResponse {
    pub request_id: String,
    pub client_id: String,
    #[serde(with = "http_serde::status_code")]
    pub status_code: http::StatusCode,
}
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct GetRequest {
    pub client_id: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GetResponse {
    pub request_id: String,
    pub connected_app: ConnectedApp,
    #[serde(with = "http_serde::status_code")]
    pub status_code: http::StatusCode,
}
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SearchRequest {
    pub cursor: std::option::Option<String>,
    pub limit: std::option::Option<u32>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SearchResponse {
    pub request_id: String,
    pub connected_apps: std::vec::Vec<ConnectedApp>,
    pub results_metadata: ResultsMetadata,
    #[serde(with = "http_serde::status_code")]
    pub status_code: http::StatusCode,
}
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct UpdateRequest {
    pub client_id: String,
    pub client_name: std::option::Option<String>,
    pub client_description: std::option::Option<String>,
    pub redirect_urls: std::option::Option<std::vec::Vec<String>>,
    pub full_access_allowed: std::option::Option<bool>,
    pub access_token_expiry_minutes: std::option::Option<i32>,
    pub access_token_custom_audience: std::option::Option<String>,
    pub access_token_template_content: std::option::Option<String>,
    pub post_logout_redirect_urls: std::option::Option<std::vec::Vec<String>>,
    pub logo_url: std::option::Option<String>,
    pub bypass_consent_for_offline_access: std::option::Option<bool>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct UpdateResponse {
    pub request_id: String,
    pub connected_app: ConnectedApp,
    #[serde(with = "http_serde::status_code")]
    pub status_code: http::StatusCode,
}

#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub enum CreateRequestClientType {
    #[serde(rename = "first_party")]
    #[default]
    FirstParty,
    #[serde(rename = "first_party_public")]
    FirstPartyPublic,
    #[serde(rename = "third_party")]
    ThirdParty,
    #[serde(rename = "third_party_public")]
    ThirdPartyPublic,
}

pub struct Clients {
    http_client: crate::client::Client,
    pub secrets: Secrets,
}

impl Clients {
    pub fn new(http_client: crate::client::Client) -> Self {
        Self {
            http_client: http_client.clone(),
            secrets: Secrets::new(http_client.clone()),
        }
    }

    pub async fn get(&self, body: GetRequest) -> crate::Result<GetResponse> {
        let client_id = &body.client_id;
        let path = format!("/v1/connected_apps/clients/{client_id}");
        self.http_client
            .send(crate::Request {
                method: http::Method::GET,
                path,
                body,
            })
            .await
    }
    pub async fn update(&self, body: UpdateRequest) -> crate::Result<UpdateResponse> {
        let client_id = &body.client_id;
        let path = format!("/v1/connected_apps/clients/{client_id}");
        self.http_client
            .send(crate::Request {
                method: http::Method::PUT,
                path,
                body,
            })
            .await
    }
    pub async fn delete(&self, body: DeleteRequest) -> crate::Result<DeleteResponse> {
        let client_id = &body.client_id;
        let path = format!("/v1/connected_apps/clients/{client_id}");
        self.http_client
            .send(crate::Request {
                method: http::Method::DELETE,
                path,
                body,
            })
            .await
    }
    pub async fn search(&self, body: SearchRequest) -> crate::Result<SearchResponse> {
        let path = String::from("/v1/connected_apps/clients/search");
        self.http_client
            .send(crate::Request {
                method: http::Method::POST,
                path,
                body,
            })
            .await
    }
    pub async fn create(&self, body: CreateRequest) -> crate::Result<CreateResponse> {
        let path = String::from("/v1/connected_apps/clients");
        self.http_client
            .send(crate::Request {
                method: http::Method::POST,
                path,
                body,
            })
            .await
    }
}
