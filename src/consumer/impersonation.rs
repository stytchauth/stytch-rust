// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

use crate::consumer::sessions::Session;
use crate::consumer::users::User;
use serde::{Deserialize, Serialize};


/// AuthenticateRequest: Request type for `Impersonation.authenticate`.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct AuthenticateRequest {
    /// impersonation_token: The User Impersonation token to authenticate.
    pub impersonation_token: String,
}
/// AuthenticateResponse: Response type for `Impersonation.authenticate`.
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AuthenticateResponse {
    /// request_id: Globally unique UUID that is returned with every API call. This value is important to log
    /// for debugging purposes; we may ask for this value to help identify a specific API call when helping you
    /// debug an issue.
    pub request_id: String,
    /// user_id: The unique ID of the affected User.
    pub user_id: String,
    /// user: The `user` object affected by this API call. See the
    /// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
    pub user: User,
    /// session_token: A secret token for a given Stytch Session.
    pub session_token: String,
    /// session_jwt: The JSON Web Token (JWT) for a given Stytch Session.
    pub session_jwt: String,
    /// status_code: The HTTP status code of the response. Stytch follows standard HTTP response status code
    /// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
    /// are server errors.
    #[serde(with = "http_serde::status_code")]
    pub status_code: http::StatusCode,
    /// session: If you initiate a Session, by including `session_duration_minutes` in your authenticate call,
    /// you'll receive a full Session object in the response.
    /// 
    ///   See [Session object](https://stytch.com/docs/api/session-object) for complete response fields.
    /// 
    pub session: std::option::Option<Session>,
}




pub struct Impersonation {
  http_client: crate::client::Client,
}

impl Impersonation {
    pub fn new(http_client: crate::client::Client) -> Self {
      Self {
        http_client: http_client.clone(),
      }
    }

    pub async fn authenticate(&self, body: AuthenticateRequest) -> crate::Result<AuthenticateResponse> {
        let path = String::from("/v1/impersonation/authenticate");
        self.http_client.send(crate::Request{
            method: http::Method::POST,
            path,
            body,
        }).await
    }

}
