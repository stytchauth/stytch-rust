// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

use crate::b2b::organizations_members::Members;
use serde::{Deserialize, Serialize};

/// ActiveSSOConnection:
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ActiveSSOConnection {
    /// connection_id: Globally unique UUID that identifies a specific SSO `connection_id` for a Member.
    pub connection_id: String,
    /// display_name: A human-readable display name for the connection.
    pub display_name: String,
}

/// Member:
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Member {
    /// organization_id: Globally unique UUID that identifies a specific Organization. The `organization_id` is
    /// critical to perform operations on an Organization, so be sure to preserve this value.
    pub organization_id: String,
    /// member_id: Globally unique UUID that identifies a specific Member. The `member_id` is critical to
    /// perform operations on a Member, so be sure to preserve this value.
    pub member_id: String,
    /// email_address: The email address of the Member.
    pub email_address: String,
    /// status: The status of the Member. The possible values are: `pending`, `invited`, `active`, or `deleted`.
    pub status: String,
    /// name: The name of the Member.
    pub name: String,
    /// sso_registrations: An array of registered [SAML Connection](saml-connection-object) objects the Member
    /// has authenticated with.
    pub sso_registrations: std::vec::Vec<SSORegistration>,
    /// is_breakglass: Identifies the Member as a break glass user - someone who has permissions to authenticate
    /// into an Organization by bypassing the Organization's settings. A break glass account is typically used
    /// for emergency purposes to gain access outside of normal authentication procedures. Refer to the
    /// [Organization object](organization-object) and its `auth_methods` and `allowed_auth_methods` fields for
    /// more details.
    pub is_breakglass: bool,
    /// member_password_id: Globally unique UUID that identifies a Member's password.
    pub member_password_id: String,
    /// oauth_registrations: A list of OAuth registrations for this member.
    pub oauth_registrations: std::vec::Vec<OAuthRegistration>,
    /// email_address_verified: Whether or not the Member's email address is verified.
    pub email_address_verified: bool,
    /// mfa_phone_number_verified: Whether or not the Member's phone number is verified.
    pub mfa_phone_number_verified: bool,
    /// mfa_enrolled: Sets whether the Member is enrolled in MFA. If true, the Member must complete an MFA step
    /// whenever they wish to log in to their Organization. If false, the Member only needs to complete an MFA
    /// step if the Organization's MFA policy is set to `REQUIRED_FOR_ALL`.
    pub mfa_enrolled: bool,
    /// mfa_phone_number: The Member's phone number. A Member may only have one phone number.
    pub mfa_phone_number: String,
    /// trusted_metadata: An arbitrary JSON object for storing application-specific data or
    /// identity-provider-specific data.
    pub trusted_metadata: std::option::Option<serde_json::Value>,
    /// untrusted_metadata: An arbitrary JSON object of application-specific data. These fields can be edited
    /// directly by the
    ///   frontend SDK, and should not be used to store critical information. See the
    /// [Metadata resource](https://stytch.com/docs/b2b/api/metadata)
    ///   for complete field behavior details.
    pub untrusted_metadata: std::option::Option<serde_json::Value>,
}

/// OAuthRegistration:
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct OAuthRegistration {
    /// provider_type: Denotes the OAuth identity provider that the user has authenticated with, e.g. Google,
    /// Microsoft, GitHub etc.
    pub provider_type: String,
    /// provider_subject: The unique identifier for the User within a given OAuth provider. Also commonly called
    /// the `sub` or "Subject field" in OAuth protocols.
    pub provider_subject: String,
    /// member_oauth_registration_id: The unique ID of an OAuth registration.
    pub member_oauth_registration_id: String,
    /// profile_picture_url: If available, the `profile_picture_url` is a URL of the User's profile picture set
    /// in OAuth identity the provider that the User has authenticated with, e.g. Google profile picture.
    pub profile_picture_url: std::option::Option<String>,
    /// locale: If available, the `locale` is the Member's locale set in the OAuth identity provider that the
    /// user has authenticated with.
    pub locale: std::option::Option<String>,
}

/// Organization:
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Organization {
    /// organization_id: Globally unique UUID that identifies a specific Organization. The `organization_id` is
    /// critical to perform operations on an Organization, so be sure to preserve this value.
    pub organization_id: String,
    /// organization_name: The name of the Organization.
    pub organization_name: String,
    /// organization_logo_url: The image URL of the Organization logo.
    pub organization_logo_url: String,
    /// organization_slug: The unique URL slug of the Organization. A minimum of two characters is required. The
    /// slug only accepts alphanumeric characters and the following reserved characters: `-` `.` `_` `~`.
    pub organization_slug: String,
    /// sso_jit_provisioning: The authentication setting that controls the JIT provisioning of Members when
    /// authenticating via SSO. The accepted values are:
    ///  
    ///   `ALL_ALLOWED` – new Members will be automatically provisioned upon successful authentication via any
    /// of the Organization's `sso_active_connections`.
    ///  
    ///   `RESTRICTED` – only new Members with SSO logins that comply with
    /// `sso_jit_provisioning_allowed_connections` can be provisioned upon authentication.
    ///  
    ///   `NOT_ALLOWED` – disable JIT provisioning via SSO.
    ///   
    pub sso_jit_provisioning: String,
    /// sso_jit_provisioning_allowed_connections: An array of `connection_id`s that reference
    /// [SAML Connection objects](https://stytch.com/docs/b2b/api/saml-connection-object).
    ///   Only these connections will be allowed to JIT provision Members via SSO when `sso_jit_provisioning` is
    /// set to `RESTRICTED`.
    pub sso_jit_provisioning_allowed_connections: std::vec::Vec<String>,
    /// sso_active_connections: An array of active
    /// [SAML Connection references](https://stytch.com/docs/b2b/api/saml-connection-object).
    pub sso_active_connections: std::vec::Vec<ActiveSSOConnection>,
    /// email_allowed_domains: An array of email domains that allow invites or JIT provisioning for new Members.
    /// This list is enforced when either `email_invites` or `email_jit_provisioning` is set to `RESTRICTED`.
    ///     
    ///     
    ///     Common domains such as `gmail.com` are not allowed. See the
    /// [common email domains resource](https://stytch.com/docs/b2b/api/common-email-domains) for the full list.
    pub email_allowed_domains: std::vec::Vec<String>,
    /// email_jit_provisioning: The authentication setting that controls how a new Member can be provisioned by
    /// authenticating via Email Magic Link. The accepted values are:
    ///  
    ///   `RESTRICTED` – only new Members with verified emails that comply with `email_allowed_domains` can be
    /// provisioned upon authentication via Email Magic Link.
    ///  
    ///   `NOT_ALLOWED` – disable JIT provisioning via Email Magic Link.
    ///   
    pub email_jit_provisioning: String,
    /// email_invites: The authentication setting that controls how a new Member can be invited to an
    /// organization by email. The accepted values are:
    ///  
    ///   `ALL_ALLOWED` – any new Member can be invited to join via email.
    ///  
    ///   `RESTRICTED` – only new Members with verified emails that comply with `email_allowed_domains` can be
    /// invited via email.
    ///  
    ///   `NOT_ALLOWED` – disable email invites.
    ///   
    pub email_invites: String,
    /// auth_methods: The setting that controls which authentication methods can be used by Members of an
    /// Organization. The accepted values are:
    ///  
    ///   `ALL_ALLOWED` – the default setting which allows all authentication methods to be used.
    ///  
    ///   `RESTRICTED` – only methods that comply with `allowed_auth_methods` can be used for authentication.
    /// This setting does not apply to Members with `is_breakglass` set to `true`.
    ///   
    pub auth_methods: String,
    /// allowed_auth_methods:
    ///   An array of allowed authentication methods. This list is enforced when `auth_methods` is set to
    /// `RESTRICTED`.
    ///   The list's accepted values are: `sso`, `magic_link`, `password`, `google_oauth`, and `microsoft_oauth`.
    ///   
    pub allowed_auth_methods: std::vec::Vec<String>,
    pub mfa_policy: String,
    /// trusted_metadata: An arbitrary JSON object for storing application-specific data or
    /// identity-provider-specific data.
    pub trusted_metadata: std::option::Option<serde_json::Value>,
    /// sso_default_connection_id: The default connection used for SSO when there are multiple active
    /// connections.
    pub sso_default_connection_id: std::option::Option<String>,
}

/// ResultsMetadata:
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ResultsMetadata {
    /// total: The total number of results returned by your search query.
    pub total: i32,
    /// next_cursor: The `next_cursor` string is returned when your search result contains more than one page of
    /// results. This value is passed into your next search call in the `cursor` field.
    pub next_cursor: std::option::Option<String>,
}

/// SSORegistration:
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SSORegistration {
    /// connection_id: Globally unique UUID that identifies a specific SSO `connection_id` for a Member.
    pub connection_id: String,
    /// external_id: The ID of the member given by the identity provider.
    pub external_id: String,
    /// registration_id: The unique ID of an SSO Registration.
    pub registration_id: String,
    /// sso_attributes: An object for storing SSO attributes brought over from the identity provider.
    pub sso_attributes: std::option::Option<serde_json::Value>,
}

/// SearchQuery:
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SearchQuery {
    /// operator: The action to perform on the operands. The accepted value are:
    ///
    ///   `AND` – all the operand values provided must match.
    ///   
    ///   `OR` – the operator will return any matches to at least one of the operand values you supply.
    pub operator: SearchQueryOperator,
    /// operands: An array of operand objects that contains all of the filters and values to apply to your
    /// search query.
    pub operands: std::vec::Vec<serde_json::Value>,
}

/// CreateRequest: Request type for `Organizations.create`.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CreateRequest {
    /// organization_name: The name of the Organization.
    pub organization_name: String,
    /// organization_slug: The unique URL slug of the Organization. A minimum of two characters is required. The
    /// slug only accepts alphanumeric characters and the following reserved characters: `-` `.` `_` `~`.
    pub organization_slug: std::option::Option<String>,
    /// organization_logo_url: The image URL of the Organization logo.
    pub organization_logo_url: std::option::Option<String>,
    /// trusted_metadata: An arbitrary JSON object for storing application-specific data or
    /// identity-provider-specific data.
    pub trusted_metadata: std::option::Option<serde_json::Value>,
    /// sso_jit_provisioning: The authentication setting that controls the JIT provisioning of Members when
    /// authenticating via SSO. The accepted values are:
    ///  
    ///   `ALL_ALLOWED` – new Members will be automatically provisioned upon successful authentication via any
    /// of the Organization's `sso_active_connections`.
    ///  
    ///   `RESTRICTED` – only new Members with SSO logins that comply with
    /// `sso_jit_provisioning_allowed_connections` can be provisioned upon authentication.
    ///  
    ///   `NOT_ALLOWED` – disable JIT provisioning via SSO.
    ///   
    pub sso_jit_provisioning: std::option::Option<String>,
    /// email_allowed_domains: An array of email domains that allow invites or JIT provisioning for new Members.
    /// This list is enforced when either `email_invites` or `email_jit_provisioning` is set to `RESTRICTED`.
    ///     
    ///     
    ///     Common domains such as `gmail.com` are not allowed. See the
    /// [common email domains resource](https://stytch.com/docs/b2b/api/common-email-domains) for the full list.
    pub email_allowed_domains: std::option::Option<std::vec::Vec<String>>,
    /// email_jit_provisioning: The authentication setting that controls how a new Member can be provisioned by
    /// authenticating via Email Magic Link. The accepted values are:
    ///  
    ///   `RESTRICTED` – only new Members with verified emails that comply with `email_allowed_domains` can be
    /// provisioned upon authentication via Email Magic Link.
    ///  
    ///   `NOT_ALLOWED` – disable JIT provisioning via Email Magic Link.
    ///   
    pub email_jit_provisioning: std::option::Option<String>,
    /// email_invites: The authentication setting that controls how a new Member can be invited to an
    /// organization by email. The accepted values are:
    ///  
    ///   `ALL_ALLOWED` – any new Member can be invited to join via email.
    ///  
    ///   `RESTRICTED` – only new Members with verified emails that comply with `email_allowed_domains` can be
    /// invited via email.
    ///  
    ///   `NOT_ALLOWED` – disable email invites.
    ///   
    pub email_invites: std::option::Option<String>,
    /// auth_methods: The setting that controls which authentication methods can be used by Members of an
    /// Organization. The accepted values are:
    ///  
    ///   `ALL_ALLOWED` – the default setting which allows all authentication methods to be used.
    ///  
    ///   `RESTRICTED` – only methods that comply with `allowed_auth_methods` can be used for authentication.
    /// This setting does not apply to Members with `is_breakglass` set to `true`.
    ///   
    pub auth_methods: std::option::Option<String>,
    /// allowed_auth_methods:
    ///   An array of allowed authentication methods. This list is enforced when `auth_methods` is set to
    /// `RESTRICTED`.
    ///   The list's accepted values are: `sso`, `magic_link`, `password`, `google_oauth`, and `microsoft_oauth`.
    ///   
    pub allowed_auth_methods: std::option::Option<std::vec::Vec<String>>,
    /// mfa_policy: The setting that controls the MFA policy for all Members in the Organization. The accepted
    /// values are:
    ///  
    ///   `REQUIRED_FOR_ALL` – All Members within the Organization will be required to complete MFA every time
    /// they wish to log in.
    ///  
    ///   `OPTIONAL` – The default value. The Organization does not require MFA by default for all Members.
    /// Members will be required to complete MFA only if their `mfa_enrolled` status is set to true.
    ///   
    pub mfa_policy: std::option::Option<String>,
}

/// CreateResponse: Response type for `Organizations.create`.
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CreateResponse {
    /// request_id: Globally unique UUID that is returned with every API call. This value is important to log
    /// for debugging purposes; we may ask for this value to help identify a specific API call when helping you
    /// debug an issue.
    pub request_id: String,
    /// organization: The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
    pub organization: Organization,
    /// status_code: The HTTP status code of the response. Stytch follows standard HTTP response status code
    /// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
    /// are server errors.
    #[serde(with = "http_serde::status_code")]
    pub status_code: http::StatusCode,
}

/// DeleteRequest: Request type for `Organizations.delete`.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct DeleteRequest {
    /// organization_id: Globally unique UUID that identifies a specific Organization. The `organization_id` is
    /// critical to perform operations on an Organization, so be sure to preserve this value.
    pub organization_id: String,
}

/// DeleteResponse: Response type for `Organizations.delete`.
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeleteResponse {
    /// request_id: Globally unique UUID that is returned with every API call. This value is important to log
    /// for debugging purposes; we may ask for this value to help identify a specific API call when helping you
    /// debug an issue.
    pub request_id: String,
    /// organization_id: Globally unique UUID that identifies a specific Organization. The `organization_id` is
    /// critical to perform operations on an Organization, so be sure to preserve this value.
    pub organization_id: String,
    /// status_code: The HTTP status code of the response. Stytch follows standard HTTP response status code
    /// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
    /// are server errors.
    #[serde(with = "http_serde::status_code")]
    pub status_code: http::StatusCode,
}

/// GetRequest: Request type for `Organizations.get`.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct GetRequest {
    /// organization_id: Globally unique UUID that identifies a specific Organization. The `organization_id` is
    /// critical to perform operations on an Organization, so be sure to preserve this value.
    pub organization_id: String,
}

/// GetResponse: Response type for `Organizations.get`.
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GetResponse {
    /// request_id: Globally unique UUID that is returned with every API call. This value is important to log
    /// for debugging purposes; we may ask for this value to help identify a specific API call when helping you
    /// debug an issue.
    pub request_id: String,
    /// organization: The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
    pub organization: Organization,
    /// status_code: The HTTP status code of the response. Stytch follows standard HTTP response status code
    /// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
    /// are server errors.
    #[serde(with = "http_serde::status_code")]
    pub status_code: http::StatusCode,
}

/// SearchRequest: Request type for `Organizations.search`.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SearchRequest {
    /// cursor: The `cursor` field allows you to paginate through your results. Each result array is limited to
    /// 1000 results. If your query returns more than 1000 results, you will need to paginate the responses
    /// using the `cursor`. If you receive a response that includes a non-null `next_cursor` in the
    /// `results_metadata` object, repeat the search call with the `next_cursor` value set to the `cursor` field
    /// to retrieve the next page of results. Continue to make search calls until the `next_cursor` in the
    /// response is null.
    pub cursor: std::option::Option<String>,
    /// limit: The number of search results to return per page. The default limit is 100. A maximum of 1000
    /// results can be returned by a single search request. If the total size of your result set is greater than
    /// one page size, you must paginate the response. See the `cursor` field.
    pub limit: std::option::Option<i32>,
    /// query: The optional query object contains the operator, i.e. `AND` or `OR`, and the operands that will
    /// filter your results. Only an operator is required. If you include no operands, no filtering will be
    /// applied. If you include no query object, it will return all Organizations with no filtering applied.
    pub query: std::option::Option<SearchQuery>,
}

/// SearchResponse: Response type for `Organizations.search`.
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SearchResponse {
    /// request_id: Globally unique UUID that is returned with every API call. This value is important to log
    /// for debugging purposes; we may ask for this value to help identify a specific API call when helping you
    /// debug an issue.
    pub request_id: String,
    /// organizations: An array of [Organization objects](https://stytch.com/docs/b2b/api/organization-object).
    pub organizations: std::vec::Vec<Organization>,
    /// results_metadata: The search `results_metadata` object contains metadata relevant to your specific query
    /// like `total` and `next_cursor`.
    pub results_metadata: ResultsMetadata,
    /// status_code: The HTTP status code of the response. Stytch follows standard HTTP response status code
    /// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
    /// are server errors.
    #[serde(with = "http_serde::status_code")]
    pub status_code: http::StatusCode,
}

/// UpdateRequest: Request type for `Organizations.update`.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct UpdateRequest {
    /// organization_id: Globally unique UUID that identifies a specific Organization. The `organization_id` is
    /// critical to perform operations on an Organization, so be sure to preserve this value.
    pub organization_id: String,
    /// organization_name: The name of the Organization.
    pub organization_name: std::option::Option<String>,
    /// organization_slug: The unique URL slug of the Organization. A minimum of two characters is required. The
    /// slug only accepts alphanumeric characters and the following reserved characters: `-` `.` `_` `~`.
    pub organization_slug: std::option::Option<String>,
    /// organization_logo_url: The image URL of the Organization logo.
    pub organization_logo_url: std::option::Option<String>,
    /// trusted_metadata: An arbitrary JSON object for storing application-specific data or
    /// identity-provider-specific data.
    pub trusted_metadata: std::option::Option<serde_json::Value>,
    /// sso_default_connection_id: The default connection used for SSO when there are multiple active
    /// connections.
    pub sso_default_connection_id: std::option::Option<String>,
    /// sso_jit_provisioning: The authentication setting that controls the JIT provisioning of Members when
    /// authenticating via SSO. The accepted values are:
    ///  
    ///   `ALL_ALLOWED` – new Members will be automatically provisioned upon successful authentication via any
    /// of the Organization's `sso_active_connections`.
    ///  
    ///   `RESTRICTED` – only new Members with SSO logins that comply with
    /// `sso_jit_provisioning_allowed_connections` can be provisioned upon authentication.
    ///  
    ///   `NOT_ALLOWED` – disable JIT provisioning via SSO.
    ///   
    pub sso_jit_provisioning: std::option::Option<String>,
    /// sso_jit_provisioning_allowed_connections: An array of `connection_id`s that reference
    /// [SAML Connection objects](https://stytch.com/docs/b2b/api/saml-connection-object).
    ///   Only these connections will be allowed to JIT provision Members via SSO when `sso_jit_provisioning` is
    /// set to `RESTRICTED`.
    pub sso_jit_provisioning_allowed_connections: std::option::Option<std::vec::Vec<String>>,
    /// email_allowed_domains: An array of email domains that allow invites or JIT provisioning for new Members.
    /// This list is enforced when either `email_invites` or `email_jit_provisioning` is set to `RESTRICTED`.
    ///     
    ///     
    ///     Common domains such as `gmail.com` are not allowed. See the
    /// [common email domains resource](https://stytch.com/docs/b2b/api/common-email-domains) for the full list.
    pub email_allowed_domains: std::option::Option<std::vec::Vec<String>>,
    /// email_jit_provisioning: The authentication setting that controls how a new Member can be provisioned by
    /// authenticating via Email Magic Link. The accepted values are:
    ///  
    ///   `RESTRICTED` – only new Members with verified emails that comply with `email_allowed_domains` can be
    /// provisioned upon authentication via Email Magic Link.
    ///  
    ///   `NOT_ALLOWED` – disable JIT provisioning via Email Magic Link.
    ///   
    pub email_jit_provisioning: std::option::Option<String>,
    /// email_invites: The authentication setting that controls how a new Member can be invited to an
    /// organization by email. The accepted values are:
    ///  
    ///   `ALL_ALLOWED` – any new Member can be invited to join via email.
    ///  
    ///   `RESTRICTED` – only new Members with verified emails that comply with `email_allowed_domains` can be
    /// invited via email.
    ///  
    ///   `NOT_ALLOWED` – disable email invites.
    ///   
    pub email_invites: std::option::Option<String>,
    /// auth_methods: The setting that controls which authentication methods can be used by Members of an
    /// Organization. The accepted values are:
    ///  
    ///   `ALL_ALLOWED` – the default setting which allows all authentication methods to be used.
    ///  
    ///   `RESTRICTED` – only methods that comply with `allowed_auth_methods` can be used for authentication.
    /// This setting does not apply to Members with `is_breakglass` set to `true`.
    ///   
    pub auth_methods: std::option::Option<String>,
    /// allowed_auth_methods:
    ///   An array of allowed authentication methods. This list is enforced when `auth_methods` is set to
    /// `RESTRICTED`.
    ///   The list's accepted values are: `sso`, `magic_link`, `password`, `google_oauth`, and `microsoft_oauth`.
    ///   
    pub allowed_auth_methods: std::option::Option<std::vec::Vec<String>>,
    /// mfa_policy: The setting that controls the MFA policy for all Members in the Organization. The accepted
    /// values are:
    ///  
    ///   `REQUIRED_FOR_ALL` – All Members within the Organization will be required to complete MFA every time
    /// they wish to log in.
    ///  
    ///   `OPTIONAL` – The default value. The Organization does not require MFA by default for all Members.
    /// Members will be required to complete MFA only if their `mfa_enrolled` status is set to true.
    ///   
    pub mfa_policy: std::option::Option<String>,
}

/// UpdateResponse: Response type for `Organizations.update`.
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct UpdateResponse {
    /// request_id: Globally unique UUID that is returned with every API call. This value is important to log
    /// for debugging purposes; we may ask for this value to help identify a specific API call when helping you
    /// debug an issue.
    pub request_id: String,
    /// organization: The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
    pub organization: Organization,
    /// status_code: The HTTP status code of the response. Stytch follows standard HTTP response status code
    /// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
    /// are server errors.
    #[serde(with = "http_serde::status_code")]
    pub status_code: http::StatusCode,
}

#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub enum SearchQueryOperator {
    #[serde(rename = "or")]
    #[default]
    OR,
    #[serde(rename = "and")]
    AND,
}

pub struct Organizations {
    http_client: crate::reqwest::Client,
    pub members: Members,
}

impl Organizations {
    pub fn new(http_client: crate::reqwest::Client) -> Self {
        Self {
            http_client: http_client.clone(),
            members: Members::new(http_client.clone()),
        }
    }

    pub async fn create(&self, body: CreateRequest) -> crate::Result<CreateResponse> {
        let path = format!("/v1/b2b/organizations");
        self.http_client
            .send(crate::Request {
                method: http::Method::POST,
                path,
                body,
            })
            .await
    }
    pub async fn get(&self, body: GetRequest) -> crate::Result<GetResponse> {
        let organization_id = &body.organization_id;
        let path = format!("/v1/b2b/organizations/{organization_id}");
        self.http_client
            .send(crate::Request {
                method: http::Method::GET,
                path,
                body,
            })
            .await
    }
    pub async fn update(&self, body: UpdateRequest) -> crate::Result<UpdateResponse> {
        let organization_id = &body.organization_id;
        let path = format!("/v1/b2b/organizations/{organization_id}");
        self.http_client
            .send(crate::Request {
                method: http::Method::PUT,
                path,
                body,
            })
            .await
    }
    pub async fn delete(&self, body: DeleteRequest) -> crate::Result<DeleteResponse> {
        let organization_id = &body.organization_id;
        let path = format!("/v1/b2b/organizations/{organization_id}");
        self.http_client
            .send(crate::Request {
                method: http::Method::DELETE,
                path,
                body,
            })
            .await
    }
    pub async fn search(&self, body: SearchRequest) -> crate::Result<SearchResponse> {
        let path = format!("/v1/b2b/organizations/search");
        self.http_client
            .send(crate::Request {
                method: http::Method::POST,
                path,
                body,
            })
            .await
    }
}
