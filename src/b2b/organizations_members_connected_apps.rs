// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct RevokeRequest {
    pub organization_id: String,
    pub member_id: String,
    pub connected_app_id: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RevokeResponse {
    pub request_id: String,
    #[serde(with = "http_serde::status_code")]
    pub status_code: http::StatusCode,
}

pub struct ConnectedApps {
    http_client: crate::client::Client,
}

impl ConnectedApps {
    pub fn new(http_client: crate::client::Client) -> Self {
        Self {
            http_client: http_client.clone(),
        }
    }

    pub async fn revoke(&self, body: RevokeRequest) -> crate::Result<RevokeResponse> {
        let organization_id = &body.organization_id;
        let member_id = &body.member_id;
        let connected_app_id = &body.connected_app_id;
        let path = format!("/v1/b2b/organizations/{organization_id}/members/{member_id}/connected_apps/{connected_app_id}/revoke");
        self.http_client
            .send(crate::Request {
                method: http::Method::POST,
                path,
                body,
            })
            .await
    }
}
