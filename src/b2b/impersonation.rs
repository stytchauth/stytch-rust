// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

use crate::b2b::mfa::MfaRequired;
use crate::b2b::organizations::Member;
use crate::b2b::organizations::Organization;
use crate::b2b::sessions::MemberSession;
use serde::{Deserialize, Serialize};


/// AuthenticateRequest: Request type for `Impersonation.authenticate`.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct AuthenticateRequest {
    /// impersonation_token: The User Impersonation token to authenticate.
    pub impersonation_token: String,
}
/// AuthenticateResponse: Response type for `Impersonation.authenticate`.
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AuthenticateResponse {
    /// request_id: Globally unique UUID that is returned with every API call. This value is important to log
    /// for debugging purposes; we may ask for this value to help identify a specific API call when helping you
    /// debug an issue.
    pub request_id: String,
    /// member_id: Globally unique UUID that identifies a specific Member.
    pub member_id: String,
    /// organization_id: Globally unique UUID that identifies a specific Organization. The `organization_id` is
    /// critical to perform operations on an Organization, so be sure to preserve this value.
    pub organization_id: String,
    /// member: The [Member object](https://stytch.com/docs/b2b/api/member-object)
    pub member: Member,
    /// session_token: A secret token for a given Stytch Session.
    pub session_token: String,
    /// session_jwt: The JSON Web Token (JWT) for a given Stytch Session.
    pub session_jwt: String,
    /// organization: The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
    pub organization: Organization,
    /// intermediate_session_token: Successfully authenticating an impersonation token will never result in an
    /// intermediate session. If the token is valid, a full session will be created.
    pub intermediate_session_token: String,
    /// member_authenticated: The member will always be fully authenticated if an impersonation token is
    /// successfully authenticated.
    pub member_authenticated: bool,
    /// status_code: The HTTP status code of the response. Stytch follows standard HTTP response status code
    /// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
    /// are server errors.
    #[serde(with = "http_serde::status_code")]
    pub status_code: http::StatusCode,
    /// member_session: The [Session object](https://stytch.com/docs/b2b/api/session-object) for the
    /// impersonated Member.
    pub member_session: std::option::Option<MemberSession>,
    /// mfa_required: MFA will not be required when authenticating impersonation tokens.
    pub mfa_required: std::option::Option<MfaRequired>,
}




pub struct Impersonation {
  http_client: crate::client::Client,
}

impl Impersonation {
    pub fn new(http_client: crate::client::Client) -> Self {
      Self {
        http_client: http_client.clone(),
      }
    }

    pub async fn authenticate(&self, body: AuthenticateRequest) -> crate::Result<AuthenticateResponse> {
        let path = String::from("/v1/b2b/impersonation/authenticate");
        self.http_client.send(crate::Request{
            method: http::Method::POST,
            path,
            body,
        }).await
    }

}
