// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

use crate::b2b::discovery::DiscoveredOrganization;
use crate::b2b::passwords_discovery_email::Email;
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct AuthenticateRequest {
    pub email_address: String,
    pub password: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AuthenticateResponse {
    pub request_id: String,
    pub email_address: String,
    pub intermediate_session_token: String,
    pub discovered_organizations: std::vec::Vec<DiscoveredOrganization>,
    #[serde(with = "http_serde::status_code")]
    pub status_code: http::StatusCode,
}

pub struct Discovery {
    http_client: crate::client::Client,
    pub email: Email,
}

impl Discovery {
    pub fn new(http_client: crate::client::Client) -> Self {
        Self {
            http_client: http_client.clone(),
            email: Email::new(http_client.clone()),
        }
    }

    pub async fn authenticate(
        &self,
        body: AuthenticateRequest,
    ) -> crate::Result<AuthenticateResponse> {
        let path = String::from("/v1/b2b/passwords/discovery/authenticate");
        self.http_client
            .send(crate::Request {
                method: http::Method::POST,
                path,
                body,
            })
            .await
    }
}
